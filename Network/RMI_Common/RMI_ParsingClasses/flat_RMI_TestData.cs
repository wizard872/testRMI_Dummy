// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>
using Network.RMI_Common.RMI_ParsingClasses;
using System.Collections.Generic;
using System;


namespace Network.RMI_Common.RMI_ParsingClasses
{

using global::System;
using global::FlatBuffers;

public struct flat_RMI_TestData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static flat_RMI_TestData GetRootAsflat_RMI_TestData(ByteBuffer _bb) { return GetRootAsflat_RMI_TestData(_bb, new flat_RMI_TestData()); }
  public static flat_RMI_TestData GetRootAsflat_RMI_TestData(ByteBuffer _bb, flat_RMI_TestData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public flat_RMI_TestData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string TestValue1 { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTestValue1Bytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetTestValue1Bytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTestValue1Array() { return __p.__vector_as_array<byte>(4); }
  public int TestValue2 { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float TestValue3 { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<flat_RMI_TestData> Createflat_RMI_TestData(FlatBufferBuilder builder,
      StringOffset testValue1Offset = default(StringOffset),
      int testValue2 = 0,
      float testValue3 = 0.0f) {
    builder.StartObject(3);
    flat_RMI_TestData.AddTestValue3(builder, testValue3);
    flat_RMI_TestData.AddTestValue2(builder, testValue2);
    flat_RMI_TestData.AddTestValue1(builder, testValue1Offset);
    return flat_RMI_TestData.Endflat_RMI_TestData(builder);
  }

  public static void Startflat_RMI_TestData(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddTestValue1(FlatBufferBuilder builder, StringOffset testValue1Offset) { builder.AddOffset(0, testValue1Offset.Value, 0); }
  public static void AddTestValue2(FlatBufferBuilder builder, int testValue2) { builder.AddInt(1, testValue2, 0); }
  public static void AddTestValue3(FlatBufferBuilder builder, float testValue3) { builder.AddFloat(2, testValue3, 0.0f); }
  public static Offset<flat_RMI_TestData> Endflat_RMI_TestData(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<flat_RMI_TestData>(o);
  }
    public static Offset<flat_RMI_TestData> Createflat_RMI_TestData(FlatBufferBuilder builder,
 RMI_TestData data) {
        var testValue1Offset = builder.CreateString(data.testValue1);
        return Createflat_RMI_TestData(builder , testValue1Offset, data.testValue2, data.testValue3);
    }

    public static byte[] Createflat_RMI_TestData(RMI_TestData data) {
        FlatBufferBuilder fbb = new FlatBufferBuilder(512);
        fbb.Finish(flat_RMI_TestData.Createflat_RMI_TestData(fbb, data).Value);
        byte[] result = fbb.SizedByteArray();
        fbb = null;
        return result;
    }

    public static RMI_TestData GetRootAsflat_RMI_TestData(byte[] data) {
        return new RMI_TestData(flat_RMI_TestData.GetRootAsflat_RMI_TestData( new ByteBuffer(data) ) );
    }

}};