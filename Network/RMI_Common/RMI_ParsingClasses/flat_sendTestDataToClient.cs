// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>
using Network.RMI_Common.RMI_ParsingClasses;
using System.Collections.Generic;
using System;


namespace Network.RMI_Common.RMI_ParsingClasses
{

using global::System;
using global::FlatBuffers;

public struct flat_sendTestDataToClient : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static flat_sendTestDataToClient GetRootAsflat_sendTestDataToClient(ByteBuffer _bb) { return GetRootAsflat_sendTestDataToClient(_bb, new flat_sendTestDataToClient()); }
  public static flat_sendTestDataToClient GetRootAsflat_sendTestDataToClient(ByteBuffer _bb, flat_sendTestDataToClient obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public flat_sendTestDataToClient __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float TimeData { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string TestData { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTestDataBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetTestDataBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTestDataArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<flat_sendTestDataToClient> Createflat_sendTestDataToClient(FlatBufferBuilder builder,
      float timeData = 0.0f,
      StringOffset testDataOffset = default(StringOffset)) {
    builder.StartObject(2);
    flat_sendTestDataToClient.AddTestData(builder, testDataOffset);
    flat_sendTestDataToClient.AddTimeData(builder, timeData);
    return flat_sendTestDataToClient.Endflat_sendTestDataToClient(builder);
  }

  public static void Startflat_sendTestDataToClient(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddTimeData(FlatBufferBuilder builder, float timeData) { builder.AddFloat(0, timeData, 0.0f); }
  public static void AddTestData(FlatBufferBuilder builder, StringOffset testDataOffset) { builder.AddOffset(1, testDataOffset.Value, 0); }
  public static Offset<flat_sendTestDataToClient> Endflat_sendTestDataToClient(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<flat_sendTestDataToClient>(o);
  }
    public static Offset<flat_sendTestDataToClient> Createflat_sendTestDataToClient(FlatBufferBuilder builder,
 sendTestDataToClient data) {
        var testDataOffset = builder.CreateString(data.testData);
        return Createflat_sendTestDataToClient(builder , data.timeData, testDataOffset);
    }

    public static byte[] Createflat_sendTestDataToClient(sendTestDataToClient data) {
        FlatBufferBuilder fbb = new FlatBufferBuilder(512);
        fbb.Finish(flat_sendTestDataToClient.Createflat_sendTestDataToClient(fbb, data).Value);
        byte[] result = fbb.SizedByteArray();
        fbb = null;
        return result;
    }

    public static sendTestDataToClient GetRootAsflat_sendTestDataToClient(byte[] data) {
        return new sendTestDataToClient(flat_sendTestDataToClient.GetRootAsflat_sendTestDataToClient( new ByteBuffer(data) ) );
    }

}};