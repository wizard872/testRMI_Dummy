// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>
using Network.RMI_Common.RMI_ParsingClasses;
using FlatBuffers;
using System.Collections.Generic;
using System;


namespace Network.RMI_Common.RMI_ParsingClasses
{

using global::System;
using global::FlatBuffers;

public struct flat_RMI_RSA_PublicKey : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static flat_RMI_RSA_PublicKey GetRootAsflat_RMI_RSA_PublicKey(ByteBuffer _bb) { return GetRootAsflat_RMI_RSA_PublicKey(_bb, new flat_RMI_RSA_PublicKey()); }
  public static flat_RMI_RSA_PublicKey GetRootAsflat_RMI_RSA_PublicKey(ByteBuffer _bb, flat_RMI_RSA_PublicKey obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public flat_RMI_RSA_PublicKey __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Base64EncodedPublicKey { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBase64EncodedPublicKeyBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetBase64EncodedPublicKeyBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetBase64EncodedPublicKeyArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<flat_RMI_RSA_PublicKey> Createflat_RMI_RSA_PublicKey(FlatBufferBuilder builder,
      StringOffset base64Encoded_publicKeyOffset = default(StringOffset)) {
    builder.StartObject(1);
    flat_RMI_RSA_PublicKey.AddBase64EncodedPublicKey(builder, base64Encoded_publicKeyOffset);
    return flat_RMI_RSA_PublicKey.Endflat_RMI_RSA_PublicKey(builder);
  }

  public static void Startflat_RMI_RSA_PublicKey(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddBase64EncodedPublicKey(FlatBufferBuilder builder, StringOffset base64EncodedPublicKeyOffset) { builder.AddOffset(0, base64EncodedPublicKeyOffset.Value, 0); }
  public static Offset<flat_RMI_RSA_PublicKey> Endflat_RMI_RSA_PublicKey(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<flat_RMI_RSA_PublicKey>(o);
  }
    public static Offset<flat_RMI_RSA_PublicKey> Createflat_RMI_RSA_PublicKey(FlatBufferBuilder builder,
 RMI_RSA_PublicKey data) {
        var base64Encoded_publicKeyOffset = builder.CreateString(data.base64Encoded_publicKey);
        return Createflat_RMI_RSA_PublicKey(builder , base64Encoded_publicKeyOffset);
    }

    public static byte[] Createflat_RMI_RSA_PublicKey(RMI_RSA_PublicKey data) {
        FlatBufferBuilder fbb = new FlatBufferBuilder(512);
        fbb.Finish(flat_RMI_RSA_PublicKey.Createflat_RMI_RSA_PublicKey(fbb, data).Value);
        byte[] result = fbb.SizedByteArray();
        fbb = null;
        return result;
    }

    public static RMI_RSA_PublicKey GetRootAsflat_RMI_RSA_PublicKey(byte[] data) {
        return new RMI_RSA_PublicKey(flat_RMI_RSA_PublicKey.GetRootAsflat_RMI_RSA_PublicKey( new ByteBuffer(data) ) );
    }
}};