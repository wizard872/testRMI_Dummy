// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>
using Network.RMI_Common.RMI_ParsingClasses;
using FlatBuffers;
using System.Collections.Generic;
using System;


namespace Network.RMI_Common.RMI_ParsingClasses
{

using global::System;
using global::FlatBuffers;

public struct flat_RMI_Send_EncryptedAES_Key : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static flat_RMI_Send_EncryptedAES_Key GetRootAsflat_RMI_Send_EncryptedAES_Key(ByteBuffer _bb) { return GetRootAsflat_RMI_Send_EncryptedAES_Key(_bb, new flat_RMI_Send_EncryptedAES_Key()); }
  public static flat_RMI_Send_EncryptedAES_Key GetRootAsflat_RMI_Send_EncryptedAES_Key(ByteBuffer _bb, flat_RMI_Send_EncryptedAES_Key obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public flat_RMI_Send_EncryptedAES_Key __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public sbyte RSAEncryptedAESKey(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int RSAEncryptedAESKeyLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRSAEncryptedAESKeyBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetRSAEncryptedAESKeyBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public sbyte[] GetRSAEncryptedAESKeyArray() { return __p.__vector_as_array<sbyte>(4); }
  public sbyte RSAEncryptedAESIV(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int RSAEncryptedAESIVLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRSAEncryptedAESIVBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetRSAEncryptedAESIVBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public sbyte[] GetRSAEncryptedAESIVArray() { return __p.__vector_as_array<sbyte>(6); }

  public static Offset<flat_RMI_Send_EncryptedAES_Key> Createflat_RMI_Send_EncryptedAES_Key(FlatBufferBuilder builder,
      VectorOffset RSAEncrypted_AESKeyOffset = default(VectorOffset),
      VectorOffset RSAEncrypted_AESIVOffset = default(VectorOffset)) {
    builder.StartObject(2);
    flat_RMI_Send_EncryptedAES_Key.AddRSAEncryptedAESIV(builder, RSAEncrypted_AESIVOffset);
    flat_RMI_Send_EncryptedAES_Key.AddRSAEncryptedAESKey(builder, RSAEncrypted_AESKeyOffset);
    return flat_RMI_Send_EncryptedAES_Key.Endflat_RMI_Send_EncryptedAES_Key(builder);
  }

  public static void Startflat_RMI_Send_EncryptedAES_Key(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddRSAEncryptedAESKey(FlatBufferBuilder builder, VectorOffset RSAEncryptedAESKeyOffset) { builder.AddOffset(0, RSAEncryptedAESKeyOffset.Value, 0); }
  public static VectorOffset CreateRSAEncryptedAESKeyVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRSAEncryptedAESKeyVectorBlock(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartRSAEncryptedAESKeyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddRSAEncryptedAESIV(FlatBufferBuilder builder, VectorOffset RSAEncryptedAESIVOffset) { builder.AddOffset(1, RSAEncryptedAESIVOffset.Value, 0); }
  public static VectorOffset CreateRSAEncryptedAESIVVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRSAEncryptedAESIVVectorBlock(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartRSAEncryptedAESIVVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<flat_RMI_Send_EncryptedAES_Key> Endflat_RMI_Send_EncryptedAES_Key(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<flat_RMI_Send_EncryptedAES_Key>(o);
  }
    public static Offset<flat_RMI_Send_EncryptedAES_Key> Createflat_RMI_Send_EncryptedAES_Key(FlatBufferBuilder builder,
 RMI_Send_EncryptedAES_Key data) {
        var RSAEncrypted_AESKeyOffset = CreateRSAEncryptedAESKeyVector(builder, (sbyte[])(Array)data.RSAEncrypted_AESKey);
        var RSAEncrypted_AESIVOffset = CreateRSAEncryptedAESIVVector(builder, (sbyte[])(Array)data.RSAEncrypted_AESIV);
        return Createflat_RMI_Send_EncryptedAES_Key(builder , RSAEncrypted_AESKeyOffset, RSAEncrypted_AESIVOffset);
    }

public static byte[] Createflat_RMI_Send_EncryptedAES_Key(RMI_Send_EncryptedAES_Key data) {
        FlatBufferBuilder fbb = new FlatBufferBuilder(512);
        fbb.Finish(flat_RMI_Send_EncryptedAES_Key.Createflat_RMI_Send_EncryptedAES_Key(fbb, data).Value);
        byte[] result = fbb.SizedByteArray();
        fbb = null;
        return result;
    }

    public static RMI_Send_EncryptedAES_Key GetRootAsflat_RMI_Send_EncryptedAES_Key(byte[] data) {
        return new RMI_Send_EncryptedAES_Key(flat_RMI_Send_EncryptedAES_Key.GetRootAsflat_RMI_Send_EncryptedAES_Key( new ByteBuffer(data) ) );
    }
}};